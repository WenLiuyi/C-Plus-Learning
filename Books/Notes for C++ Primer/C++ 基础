
## 2. 变量和基本类型

### 2.1 基本内置类型
1. 算数类型
包括：字符，整型数，布尔，浮点数
两类：整型（字符，整型数，布尔），浮点型
![alt text](image.png)
* 注：short，int都是16位

带符号类型：int，short，long，long long
无符号整型：unsigned+以上
* 注：字符型分为3种：char，signed char，unsigned char
* 字符的表现形式只有两种：带符号，不带符号的

2. 类型转换
对无符号类型复制：若超出表示范围，结果为：初始值对无符号整型可表示数值的总数取模后的余数。
例：-1赋给8比特大小的unsigned char：得到255

3. 子面型常量
* 布尔字面值：true, false
* 指针子面值：nullptr

### 2.2 变量
#### 2.2.1 初始化
* 初始化：创建变量时赋予一个初始值；赋值：将对象的当前值擦除，以一个新值替代
* 列表初始化：当用于内置类型的变量时，如果初始值存在丢失信息的风险，编译报错：
```C
long double ld=3.14;
int a{ld},b={ld};   // 错误：转换未执行，存在丢失信息的危险
int c(ld),d=ld;     // 正确：转换执行，确实丢失了部分值
```
* 默认初始化：
1. 定义于函数体之外的变量，被初始化为0；
2. **定义在函数体内部的内置类型变量，不被初始化。**（拷贝、以其他形式访问，引发错误）

> 建议：初始化每一个内置类型的变量。

#### 2.2.2 变量声明、定义的关系
C++支持**分离式编译**：将程序分成若干个文件，每个文件可被独立编译
**变量能且只能被定义一次；可以被多次声明。**
* 声明：规定变量的类型、名字；
* 定义：申请存储空间，可能分配初始值。
```C
extern int i;   // 声明，不定义
int j;  // 声明，定义
extern double pi=3.1416;    // 定义
```

#### 2.2.3 标识符
![截屏2025-02-24 16.28.33](assets/%E6%88%AA%E5%B1%8F2025-02-24%2016.28.33.png)

#### 2.2.4 名字的作用域
嵌套的作用域：允许在内层作用域中，重新定义外层作用域已有的名字

### 2.3 复合类型
#### 2.3.1 引用
* 初始化：将初始值拷贝到新建的对象；
* 引用：将引用和初始值绑定，而非拷贝。**引用无法重新绑定到另一个对象，必须初始化**。
* **引用不是对象，不能定义引用的引用**，是为一个已经存在的对象，起的另一个名字。
* **引用只能绑定在对象上，不能绑定字面值**。
```C
int ival=1024;
int &refVal=ival;   // refVal指向ival
int &refVal2;       // 报错：引用必须初始化

int *refVal3=refVal;    // refVal3绑定到：与refVal绑定的对象上
int i=refVal;   // i初始化为ival的值
```

#### 2.3.2 指针
1. **指针是一个对象**，可以赋值/拷贝，可以先后指向几个不同对象 & 引用不是一个对象，不能改绑不同对象。
2. 指针无需初始化 & 引用必须初始化

* 空指针：不指向任何对象
```C
int *p=nullptr; // 等价于int *p1=0;(初始化为字面值0)
```
* 判断指针相等（比较结果为布尔类型）：若两个指针存放的地址值相同，则它们相等。
* `void *`指针：可存放任意对象的地址

##### 指向指针的指针
指针是内存中的对象，也有地址，可以将指针的地址存放在另一个指针中。
```
int ival=1024;
int *pi=&ival;  // pi指向一个int型数
int **ppi=&pi;  // ppi指向一个int型指针    
```

##### 指向指针的引用
> 由于引用不是对象，因此：不能定义指向引用的指针。
* 判断r的类型：从右向左阅读r的定义
```C
int i=42;
int *p;
int *&r=p;  // r是对指针p的引用

r=&i;   // 给r赋值i，即：令p指向i
*r=0;   // 解引用r得i
```

### 2.4 const限定符
* 默认情况下，const对象仅在文件内有效；多个文件出现同名const变量时，相互独立。
* 多个文件共享const对象：
```C
extern const int bufSize=fcn(); // file_1.cc定义并初始化常量，能被其他文件访问
extern const int bufSize;   // file_1.h头文件：与file_1.cc中定义的buffSize是同一个
```